---
apiVersion: v1
kind: Namespace
metadata:
  name: vpn
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: headscale-data
  namespace: vpn
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: headscale-config
  namespace: vpn
data:
  config.yaml: |
    server_url: http://vpn.marcodopercurso.com.br

    listen_addr: 0.0.0.0:8080

    metrics_listen_addr: 0.0.0.0:9090

    grpc_listen_addr: 0.0.0.0:50443
    grpc_allow_insecure: true

    private_key_path: /var/lib/headscale/private.key
    noise:
      private_key_path: /var/lib/headscale/noise_private.key

    prefixes:
      v4: 100.64.0.0/10
      v6: fd7a:115c:a1e0::/48
    derp:
      server:
        enabled: false
      urls:
        - https://controlplane.tailscale.com/derpmap/default
      paths: []
      auto_update_enabled: true
      update_frequency: 24h

    disable_check_updates: true

    ephemeral_node_inactivity_timeout: 30m

    database:
      type: sqlite3
      sqlite:
        path: /var/lib/headscale/db.sqlite

    acme_url: ""
    acme_email: ""
    tls_letsencrypt_hostname: ""
    tls_letsencrypt_cache_dir: ""
    tls_letsencrypt_challenge_type: HTTP-01
    tls_letsencrypt_listen: ":http"
    tls_cert_path: ""
    tls_key_path: ""

    log:
      format: text
      level: info

    dns:
      override_local_dns: true
      nameservers:
        global:
          - 1.1.1.1
          - 1.0.0.1
      domains: []
      magic_dns: true
      base_domain: vpn.local
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: headscale
  namespace: vpn
spec:
  replicas: 1
  selector:
    matchLabels:
      app: headscale
  template:
    metadata:
      labels:
        app: headscale
    spec:
      containers:
      - name: headscale
        image: headscale/headscale:0.27.0
        command: ["headscale", "serve"]
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 50443
          name: grpc
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
          readOnly: true
        - name: data
          mountPath: /var/lib/headscale
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: headscale-config
      - name: data
        persistentVolumeClaim:
          claimName: headscale-data
---
apiVersion: v1
kind: Service
metadata:
  name: headscale
  namespace: vpn
spec:
  selector:
    app: headscale
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: grpc
    port: 50443
    targetPort: 50443
    protocol: TCP
  type: ClusterIP
---
# Ingress simples com HTTP
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale
  namespace: vpn
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    nginx.ingress.kubernetes.io/websocket-services: "headscale"
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/upstream-hash-by: "$request_uri"
spec:
  ingressClassName: nginx
  rules:
  - host: vpn.marcodopercurso.com.br
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: headscale
            port:
              number: 8080
